=begin
#AKEYLESS Vault API

#RESTFull API for interacting with AKEYLESS Vault API

OpenAPI spec version: 0.1.1
Contact: refael@akeyless.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.15

=end

require 'spec_helper'
require 'json'

# Unit tests for SwaggerClient::DefaultApi
# Automatically generated by swagger-codegen (github.com/swagger-api/swagger-codegen)
# Please update as you see appropriate
describe 'DefaultApi' do
  before do
    # run before each test
    @instance = SwaggerClient::DefaultApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of DefaultApi' do
    it 'should create an instance of DefaultApi' do
      expect(@instance).to be_instance_of(SwaggerClient::DefaultApi)
    end
  end

  # unit tests for assoc_role_am
  # Create an association between role and auth method
  # Create an association between role and auth method Options:   role-name -    The role name to associate   am-name -    The auth method name to associate   sub-claims -    key/val of sub claims, ex. group&#x3D;admins,developers   token -    Access token
  # @param role_name The role name to associate
  # @param am_name The auth method name to associate
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :sub_claims key/val of sub claims, ex. group&#x3D;admins,developers
  # @return [ReplyObj]
  describe 'assoc_role_am test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for auth
  # Authenticate to the service and returns a token to be used as a profile to execute the CLI without the need for re-authentication
  # Authenticate to the service and returns a token to be used as a profile to execute the CLI without the need for re-authentication Options:   access-id -    Access ID   access-type -    Access Type (access_key/password/saml/ldap/azure_ad/aws_iam)   access-key -    Access key (relevant only for access-type&#x3D;access_key)   admin-password -    Password (relevant only for access-type&#x3D;password)   admin-email -    Email (relevant only for access-type&#x3D;password)   cloud-id -    The cloued identity (relevant only for access-type&#x3D;azure_ad,awd_im,auid)   ldap_proxy_url -    Address URL for LDAP proxy (relevant only for access-type&#x3D;ldap)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_id Access ID
  # @option opts [String] :access_type Access Type (access_key/password/saml/ldap/azure_ad/aws_iam)
  # @option opts [String] :access_key Access key (relevant only for access-type&#x3D;access_key)
  # @option opts [String] :admin_password Password (relevant only for access-type&#x3D;password)
  # @option opts [String] :admin_email Email (relevant only for access-type&#x3D;password)
  # @option opts [String] :cloud_id The cloued identity (relevant only for access-type&#x3D;azure_ad,awd_im,auid)
  # @option opts [String] :ldap_proxy_url Address URL for LDAP proxy (relevant only for access-type&#x3D;ldap)
  # @return [ReplyObj]
  describe 'auth test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for configure
  # Configure client profile.
  # Configure client profile. Options:   access-id -    Access ID   access-key -    Access Key   admin-password -    Password (relevant only for access-type&#x3D;password)   admin-email -    Email (relevant only for access-type&#x3D;password)   access-type -    Access Type (access_key/password/azure_ad/saml/ldap/aws_iam)   ldap_proxy_url -    Address URL for ldap proxy (relevant only for access-type&#x3D;ldap)   azure_ad_object_id -    Azure Active Directory ObjectId (relevant only for access-type&#x3D;azure_ad)
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_id Access ID
  # @option opts [String] :access_key Access Key
  # @option opts [String] :admin_password Password (relevant only for access-type&#x3D;password)
  # @option opts [String] :admin_email Email (relevant only for access-type&#x3D;password)
  # @option opts [String] :access_type Access Type (access_key/password/azure_ad/saml/ldap/aws_iam)
  # @option opts [String] :ldap_proxy_url Address URL for ldap proxy (relevant only for access-type&#x3D;ldap)
  # @option opts [String] :azure_ad_object_id Azure Active Directory ObjectId (relevant only for access-type&#x3D;azure_ad)
  # @return [ReplyObj]
  describe 'configure test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_auth_method
  # Create a new Auth Method in the account
  # Create a new Auth Method in the account Options:   name -    Auth Method name   access-expires -    Access expiration date in Unix timestamp (select 0 for access without expiry date)   bound-ips -    A CIDR whitelist with the IPs that the access is restricted to   token -    Access token
  # @param name Auth Method name
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_expires Access expiration date in Unix timestamp (select 0 for access without expiry date)
  # @option opts [String] :bound_ips A CIDR whitelist with the IPs that the access is restricted to
  # @return [ReplyObj]
  describe 'create_auth_method test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_auth_method_aws_iam
  # Create a new Auth Method that will be able to authenticate using AWS IAM credentials
  # Create a new Auth Method that will be able to authenticate using AWS IAM credentials Options:   name -    Auth Method name   access-expires -    Access expiration date in Unix timestamp (select 0 for access without expiry date)   bound-ips -    A CIDR whitelist of the IPs that the access is restricted to   sts-url -    sts URL   bound-AWS-account-id -    A list of AWS account-IDs that the access is restricted to   bound-arn -    A list of full arns that the access is restricted to   bound-role-name -    A list of full role-name that the access is restricted to   bound-role-id -    A list of full role ids that the access is restricted to   bound-resource-id -    A list of full resource ids that the access is restricted to   bound-user-name -    A list of full user-name that the access is restricted to   bound-user-id -    A list of full user ids that the access is restricted to   token -    Access token
  # @param name Auth Method name
  # @param bound_aws_account_id A list of AWS account-IDs that the access is restricted to
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_expires Access expiration date in Unix timestamp (select 0 for access without expiry date)
  # @option opts [String] :bound_ips A CIDR whitelist of the IPs that the access is restricted to
  # @option opts [String] :sts_url sts URL
  # @option opts [String] :bound_arn A list of full arns that the access is restricted to
  # @option opts [String] :bound_role_name A list of full role-name that the access is restricted to
  # @option opts [String] :bound_role_id A list of full role ids that the access is restricted to
  # @option opts [String] :bound_resource_id A list of full resource ids that the access is restricted to
  # @option opts [String] :bound_user_name A list of full user-name that the access is restricted to
  # @option opts [String] :bound_user_id A list of full user ids that the access is restricted to
  # @return [ReplyObj]
  describe 'create_auth_method_aws_iam test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_auth_method_azure_ad
  # Create a new Auth Method that will be able to authenticate using Azure Active Directory credentials
  # Create a new Auth Method that will be able to authenticate using Azure Active Directory credentials Options:   name -    Auth Method name   access-expires -    Access expiration date in Unix timestamp (select 0 for access without expiry date)   bound-ips -    A CIDR whitelist of the IPs that the access is restricted to   bound-tenant-id -    The Azure tenant id that the access is restricted to   issuer -    Issuer URL   jwks-uri -    The URL to the JSON Web Key Set (JWKS) that containing the public keys that should be used to verify any JSON Web Token (JWT) issued by the authorization server.   audience -    The audience in the JWT   bound-spid -    A list of service principal IDs that the access is restricted to   bound-group-id -    A list of group ids that the access is restricted to   bound-sub-id -    A list of subscription ids that the access is restricted to   bound-rg-id -    A list of resource groups that the access is restricted to   bound-providers -    A list of resource providers that the access is restricted to (e.g, Microsoft.Compute, Microsoft.ManagedIdentity, etc)   bound-resource-types -    A list of resource types that the access is restricted to (e.g, virtualMachines, userAssignedIdentities, etc)   bound-resource-names -    A list of resource names that the access is restricted to (e.g, a virtual machine name, scale set name, etc).   bound-resource-id -    A list of full resource ids that the access is restricted to   token -    Access token
  # @param name Auth Method name
  # @param bound_tenant_id The Azure tenant id that the access is restricted to
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_expires Access expiration date in Unix timestamp (select 0 for access without expiry date)
  # @option opts [String] :bound_ips A CIDR whitelist of the IPs that the access is restricted to
  # @option opts [String] :issuer Issuer URL
  # @option opts [String] :jwks_uri The URL to the JSON Web Key Set (JWKS) that containing the public keys that should be used to verify any JSON Web Token (JWT) issued by the authorization server.
  # @option opts [String] :audience The audience in the JWT
  # @option opts [String] :bound_spid A list of service principal IDs that the access is restricted to
  # @option opts [String] :bound_group_id A list of group ids that the access is restricted to
  # @option opts [String] :bound_sub_id A list of subscription ids that the access is restricted to
  # @option opts [String] :bound_rg_id A list of resource groups that the access is restricted to
  # @option opts [String] :bound_providers A list of resource providers that the access is restricted to (e.g, Microsoft.Compute, Microsoft.ManagedIdentity, etc)
  # @option opts [String] :bound_resource_types A list of resource types that the access is restricted to (e.g, virtualMachines, userAssignedIdentities, etc)
  # @option opts [String] :bound_resource_names A list of resource names that the access is restricted to (e.g, a virtual machine name, scale set name, etc).
  # @option opts [String] :bound_resource_id A list of full resource ids that the access is restricted to
  # @return [ReplyObj]
  describe 'create_auth_method_azure_ad test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_auth_method_ldap
  # Create a new Auth Method that will be able to authenticate using LDAP
  # Create a new Auth Method that will be able to authenticate using LDAP Options:   name -    Auth Method name   access-expires -    Access expiration date in Unix timestamp (select 0 for access without expiry date)   bound-ips -    A CIDR whitelist of the IPs that the access is restricted to   public-key-file-path -    A public key generated for LDAP authentication method on Akeyless [RSA2048]   token -    Access token
  # @param name Auth Method name
  # @param public_key_file_path A public key generated for LDAP authentication method on Akeyless [RSA2048]
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_expires Access expiration date in Unix timestamp (select 0 for access without expiry date)
  # @option opts [String] :bound_ips A CIDR whitelist of the IPs that the access is restricted to
  # @return [ReplyObj]
  describe 'create_auth_method_ldap test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_auth_method_oauth2
  # Create a new Auth Method that will be able to authenticate using OpenId/OAuth2
  # Create a new Auth Method that will be able to authenticate using OpenId/OAuth2 Options:   name -    Auth Method name   access-expires -    Access expiration date in Unix timestamp (select 0 for access without expiry date)   bound-ips -    A CIDR whitelist of the IPs that the access is restricted to   bound-clients-ids -    The clients ids that the access is restricted to   issuer -    Issuer URL   jwks-uri -    The URL to the JSON Web Key Set (JWKS) that containing the public keys that should be used to verify any JSON Web Token (JWT) issued by the authorization server.   audience -    The audience in the JWT   token -    Access token
  # @param name Auth Method name
  # @param bound_clients_ids The clients ids that the access is restricted to
  # @param issuer Issuer URL
  # @param jwks_uri The URL to the JSON Web Key Set (JWKS) that containing the public keys that should be used to verify any JSON Web Token (JWT) issued by the authorization server.
  # @param audience The audience in the JWT
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_expires Access expiration date in Unix timestamp (select 0 for access without expiry date)
  # @option opts [String] :bound_ips A CIDR whitelist of the IPs that the access is restricted to
  # @return [ReplyObj]
  describe 'create_auth_method_oauth2 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_auth_method_saml
  # Create a new Auth Method that will be able to authenticate using SAML
  # Create a new Auth Method that will be able to authenticate using SAML Options:   name -    Auth Method name   access-expires -    Access expiration date in Unix timestamp (select 0 for access without expiry date)   bound-ips -    A CIDR whitelist of the IPs that the access is restricted to   idp-metadata-url -    IDP metadata url   token -    Access token
  # @param name Auth Method name
  # @param idp_metadata_url IDP metadata url
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :access_expires Access expiration date in Unix timestamp (select 0 for access without expiry date)
  # @option opts [String] :bound_ips A CIDR whitelist of the IPs that the access is restricted to
  # @return [ReplyObj]
  describe 'create_auth_method_saml test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_dynamic_secret
  # Creates a new dynamic secret item
  # Creates a new dynamic secret item Options:   name -    Dynamic secret name   metadata -    Metadata about the dynamic secret   key -    The name of a key that used to encrypt the dynamic secret values (if empty, the account default protectionKey key will be used)   token -    Access token
  # @param name Dynamic secret name
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :metadata Metadata about the dynamic secret
  # @option opts [String] :key The name of a key that used to encrypt the dynamic secret values (if empty, the account default protectionKey key will be used)
  # @return [ReplyObj]
  describe 'create_dynamic_secret test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_key
  # Creates a new key
  # Creates a new key Options:   name -    Key name   alg -    Key type. options- [AES128GCM, AES256GCM, AES128SIV, AES256SIV, RSA1024, RSA2048]   metadata -    Metadata about the key   split-level -    The number of fragments that the item will be split into (not includes customer fragment)   customer-frg-id -    The customer fragment ID that will be used to create the key (if empty, the key will be created independently of a customer fragment)   token -    Access token
  # @param name Key name
  # @param alg Key type. options- [AES128GCM, AES256GCM, AES128SIV, AES256SIV, RSA1024, RSA2048]
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :metadata Metadata about the key
  # @option opts [String] :split_level The number of fragments that the item will be split into (not includes customer fragment)
  # @option opts [String] :customer_frg_id The customer fragment ID that will be used to create the key (if empty, the key will be created independently of a customer fragment)
  # @return [ReplyObj]
  describe 'create_key test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_pki_cert_issuer
  # Creates a new PKI certificate issuer
  # Creates a new PKI certificate issuer Options:   name -    PKI certificate issuer name   signer-key-name -    A key to sign the certificate with   allowed-domains -    A list of the allowed domains that clients can request to be included in the certificate (in a comma-delimited list)   allowed-uri-sans -    A list of the allowed URIs that clients can request to be included in the certificate as part of the URI Subject Alternative Names (in a comma-delimited list)   allow-subdomains -    If set, clients can request certificates for subdomains and wildcard subdomains of the allowed domains   not-enforce-hostnames -    If set, any names are allowed for CN and SANs in the certificate and not only a valid host name   allow-any-name -    If set, clients can request certificates for any CN   not-require-cn -    If set, clients can request certificates without a CN   server-flag -    If set, certificates will be flagged for server auth use   client-flag -    If set, certificates will be flagged for client auth use   code-signing-flag -    If set, certificates will be flagged for code signing use   key-usage -    A comma-separated string or list of key usages   organization-units -    A comma-separated list of organizational units (OU) that will be set in the issued certificate   organizations -    A comma-separated list of organizations (O) that will be set in the issued certificate   country -    A comma-separated list of the country that will be set in the issued certificate   locality -    A comma-separated list of the locality that will be set in the issued certificate   province -    A comma-separated list of the province that will be set in the issued certificate   street-address -    A comma-separated list of the street address that will be set in the issued certificate   postal-code -    A comma-separated list of the postal code that will be set in the issued certificate   ttl -    The requested Time To Live for the certificate, use second units   metadata -    A metadata about the issuer   token -    Access token
  # @param name PKI certificate issuer name
  # @param signer_key_name A key to sign the certificate with
  # @param ttl The requested Time To Live for the certificate, use second units
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :allowed_domains A list of the allowed domains that clients can request to be included in the certificate (in a comma-delimited list)
  # @option opts [String] :allowed_uri_sans A list of the allowed URIs that clients can request to be included in the certificate as part of the URI Subject Alternative Names (in a comma-delimited list)
  # @option opts [String] :allow_subdomains If set, clients can request certificates for subdomains and wildcard subdomains of the allowed domains
  # @option opts [String] :not_enforce_hostnames If set, any names are allowed for CN and SANs in the certificate and not only a valid host name
  # @option opts [String] :allow_any_name If set, clients can request certificates for any CN
  # @option opts [String] :not_require_cn If set, clients can request certificates without a CN
  # @option opts [String] :server_flag If set, certificates will be flagged for server auth use
  # @option opts [String] :client_flag If set, certificates will be flagged for client auth use
  # @option opts [String] :code_signing_flag If set, certificates will be flagged for code signing use
  # @option opts [String] :key_usage A comma-separated string or list of key usages
  # @option opts [String] :organization_units A comma-separated list of organizational units (OU) that will be set in the issued certificate
  # @option opts [String] :organizations A comma-separated list of organizations (O) that will be set in the issued certificate
  # @option opts [String] :country A comma-separated list of the country that will be set in the issued certificate
  # @option opts [String] :locality A comma-separated list of the locality that will be set in the issued certificate
  # @option opts [String] :province A comma-separated list of the province that will be set in the issued certificate
  # @option opts [String] :street_address A comma-separated list of the street address that will be set in the issued certificate
  # @option opts [String] :postal_code A comma-separated list of the postal code that will be set in the issued certificate
  # @option opts [String] :metadata A metadata about the issuer
  # @return [ReplyObj]
  describe 'create_pki_cert_issuer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_role
  # Creates a new role
  # Creates a new role Options:   name -    Role name   comment -    Comment about the role   token -    Access token
  # @param name Role name
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :comment Comment about the role
  # @return [ReplyObj]
  describe 'create_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_secret
  # Creates a new secret item
  # Creates a new secret item Options:   name -    Secret name   value -    The secret value   metadata -    Metadata about the secret   key -    The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)   multiline -    The provided value is a multiline value (separated by &#39;\\n&#39;)   token -    Access token
  # @param name Secret name
  # @param value The secret value
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :metadata Metadata about the secret
  # @option opts [String] :key The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
  # @option opts [BOOLEAN] :multiline The provided value is a multiline value (separated by &#39;\\n&#39;)
  # @return [ReplyObj]
  describe 'create_secret test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_ssh_cert_issuer
  # Creates a new SSH certificate issuer
  # Creates a new SSH certificate issuer Options:   name -    SSH certificate issuer name   signer-key-name -    A key to sign the certificate with   allowed-users -    Users allowed to fetch the certificate, ex. root,ubuntu   principals -    Signed certificates with principal, ex. example_role1,example_role2   extensions -    Signed certificates with extensions, ex. permit-port-forwarding&#x3D;\&quot;\&quot;   ttl -    The requested Time To Live for the certificate, use second units   metadata -    A metadata about the issuer   token -    Access token
  # @param name SSH certificate issuer name
  # @param signer_key_name A key to sign the certificate with
  # @param allowed_users Users allowed to fetch the certificate, ex. root,ubuntu
  # @param ttl The requested Time To Live for the certificate, use second units
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :principals Signed certificates with principal, ex. example_role1,example_role2
  # @option opts [String] :extensions Signed certificates with extensions, ex. permit-port-forwarding&#x3D;\&quot;\&quot;
  # @option opts [String] :metadata A metadata about the issuer
  # @return [ReplyObj]
  describe 'create_ssh_cert_issuer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for decrypt
  # Decrypts ciphertext into plaintext by using an AES key
  # Decrypts ciphertext into plaintext by using an AES key Options:   key-name -    The name of the key to use in the decryption process   ciphertext -    Ciphertext to be decrypted in base64 encoded format   encryption-context -    The encryption context. If this was specified in the encrypt command, it must be specified here or the decryption operation will fail   token -    Access token
  # @param key_name The name of the key to use in the decryption process
  # @param ciphertext Ciphertext to be decrypted in base64 encoded format
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :encryption_context The encryption context. If this was specified in the encrypt command, it must be specified here or the decryption operation will fail
  # @return [ReplyObj]
  describe 'decrypt test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for decrypt_file
  # Decrypts a file by using an AES key
  # Decrypts a file by using an AES key Options:   key-name -    The name of the key to use in the decryption process   in -    Path to the file to be decrypted. If not provided, the content will be taken from stdin   out -    Path to the output file. If not provided, the output will be sent to stdout   encryption-context -    The encryption context. If this was specified in the encrypt command, it must be specified here or the decryption operation will fail   token -    Access token
  # @param key_name The name of the key to use in the decryption process
  # @param _in Path to the file to be decrypted. If not provided, the content will be taken from stdin
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :out Path to the output file. If not provided, the output will be sent to stdout
  # @option opts [String] :encryption_context The encryption context. If this was specified in the encrypt command, it must be specified here or the decryption operation will fail
  # @return [ReplyObj]
  describe 'decrypt_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for decrypt_pkcs1
  # Decrypts a plaintext using RSA and the padding scheme from PKCS#1 v1.5
  # Decrypts a plaintext using RSA and the padding scheme from PKCS#1 v1.5 Options:   key-name -    The name of the RSA key to use in the decryption process   ciphertext -    Ciphertext to be decrypted in base64 encoded format   token -    Access token
  # @param key_name The name of the RSA key to use in the decryption process
  # @param ciphertext Ciphertext to be decrypted in base64 encoded format
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @return [ReplyObj]
  describe 'decrypt_pkcs1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_assoc
  # Delete an association between role and auth method
  # Delete an association between role and auth method Options:   assoc-id -    The association id to be deleted   token -    Access token
  # @param assoc_id The association id to be deleted
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @return [ReplyObj]
  describe 'delete_assoc test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_auth_method
  # Delete the Auth Method
  # Delete the Auth Method Options:   name -    Auth Method name   token -    Access token
  # @param name Auth Method name
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @return [ReplyObj]
  describe 'delete_auth_method test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_item
  # Delete an item or an item version
  # Delete an item or an item version Options:   name -    Item name   token -    Access token
  # @param name Item name
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @return [ReplyObj]
  describe 'delete_item test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_role
  # Delete a role
  # Delete a role Options:   name -    Role name   token -    Access token
  # @param name Role name
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @return [ReplyObj]
  describe 'delete_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_role_rule
  # Delete a rule from a role
  # Delete a rule from a role Options:   role-name -    The role name to be updated   path -    The path the rule refers to   token -    Access token
  # @param role_name The role name to be updated
  # @param path The path the rule refers to
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @return [ReplyObj]
  describe 'delete_role_rule test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for describe_item
  # Returns the item details
  # Returns the item details Options:   name -    Item name   token -    Access token
  # @param name Item name
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @return [ReplyObj]
  describe 'describe_item test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for encrypt
  # Encrypts plaintext into ciphertext by using an AES key
  # Encrypts plaintext into ciphertext by using an AES key Options:   key-name -    The name of the key to use in the encryption process   plaintext -    Data to be encrypted   encryption-context -    name-value pair that specifies the encryption context to be used for authenticated encryption. If used here, the same value must be supplied to the decrypt command or decryption will fail   token -    Access token
  # @param key_name The name of the key to use in the encryption process
  # @param plaintext Data to be encrypted
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :encryption_context name-value pair that specifies the encryption context to be used for authenticated encryption. If used here, the same value must be supplied to the decrypt command or decryption will fail
  # @return [ReplyObj]
  describe 'encrypt test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for encrypt_file
  # Encrypts a file by using an AES key
  # Encrypts a file by using an AES key Options:   key-name -    The name of the key to use in the encryption process   in -    Path to the file to be encrypted. If not provided, the content will be taken from stdin   out -    Path to the output file. If not provided, the output will be sent to stdout   encryption-context -    name-value pair that specifies the encryption context to be used for authenticated encryption. If used here, the same value must be supplied to the decrypt command or decryption will fail   token -    Access token
  # @param key_name The name of the key to use in the encryption process
  # @param _in Path to the file to be encrypted. If not provided, the content will be taken from stdin
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :out Path to the output file. If not provided, the output will be sent to stdout
  # @option opts [String] :encryption_context name-value pair that specifies the encryption context to be used for authenticated encryption. If used here, the same value must be supplied to the decrypt command or decryption will fail
  # @return [ReplyObj]
  describe 'encrypt_file test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for encrypt_pkcs1
  # Encrypts the given message with RSA and the padding scheme from PKCS#1 v1.5
  # Encrypts the given message with RSA and the padding scheme from PKCS#1 v1.5 Options:   key-name -    The name of the RSA key to use in the encryption process   plaintext -    Data to be encrypted   token -    Access token
  # @param key_name The name of the RSA key to use in the encryption process
  # @param plaintext Data to be encrypted
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @return [ReplyObj]
  describe 'encrypt_pkcs1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_auth_method
  # Returns an information about the Auth Method
  # Returns an information about the Auth Method Options:   name -    Auth Method name   token -    Access token
  # @param name Auth Method name
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @return [ReplyObj]
  describe 'get_auth_method test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_cloud_identity
  # Get Cloud Identity Token (relevant only for access-type&#x3D;azure_ad,aws_iam)
  # Get Cloud Identity Token (relevant only for access-type&#x3D;azure_ad,aws_iam) Options:   azure_ad_object_id -    Azure Active Directory ObjectId (relevant only for access-type&#x3D;azure_ad)   url_safe -    escapes the token so it can be safely placed inside a URL query   token -    Access token
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :azure_ad_object_id Azure Active Directory ObjectId (relevant only for access-type&#x3D;azure_ad)
  # @option opts [String] :url_safe escapes the token so it can be safely placed inside a URL query
  # @return [ReplyObj]
  describe 'get_cloud_identity test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_dynamic_secret_value
  # Get dynamic secret value
  # Get dynamic secret value Options:   name -    Dynamic secret name   token -    Access token
  # @param name Dynamic secret name
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @return [ReplyObj]
  describe 'get_dynamic_secret_value test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_kube_exec_creds
  # Get credentials for authentication with Kubernetes cluster based on a PKI Cert Issuer
  # Get credentials for authentication with Kubernetes cluster based on a PKI Cert Issuer Options:   cert-issuer-name -    The name of the PKI certificate issuer   key-file-path -    The client public or private key file path (in case of a private key, it will be use to extract the public key)   common-name -    The common name to be included in the PKI certificate   alt-names -    The Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)   uri-sans -    The URI Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)   outfile -    Output file path with the certificate. If not provided, the file with the certificate will be created in the same location of the provided public key with the -cert extension   token -    Access token
  # @param cert_issuer_name The name of the PKI certificate issuer
  # @param key_file_path The client public or private key file path (in case of a private key, it will be use to extract the public key)
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :common_name The common name to be included in the PKI certificate
  # @option opts [String] :alt_names The Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)
  # @option opts [String] :uri_sans The URI Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)
  # @option opts [String] :outfile Output file path with the certificate. If not provided, the file with the certificate will be created in the same location of the provided public key with the -cert extension
  # @return [ReplyObj]
  describe 'get_kube_exec_creds test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_pki_certificate
  # Generates PKI certificate
  # Generates PKI certificate Options:   cert-issuer-name -    The name of the PKI certificate issuer   key-file-path -    The client public or private key file path (in case of a private key, it will be use to extract the public key)   common-name -    The common name to be included in the PKI certificate   alt-names -    The Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)   uri-sans -    The URI Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)   outfile -    Output file path with the certificate. If not provided, the file with the certificate will be created in the same location of the provided public key with the -cert extension   token -    Access token
  # @param cert_issuer_name The name of the PKI certificate issuer
  # @param key_file_path The client public or private key file path (in case of a private key, it will be use to extract the public key)
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :common_name The common name to be included in the PKI certificate
  # @option opts [String] :alt_names The Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)
  # @option opts [String] :uri_sans The URI Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)
  # @option opts [String] :outfile Output file path with the certificate. If not provided, the file with the certificate will be created in the same location of the provided public key with the -cert extension
  # @return [ReplyObj]
  describe 'get_pki_certificate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_role
  # Get role details
  # Get role details Options:   name -    Role name   token -    Access token
  # @param name Role name
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @return [ReplyObj]
  describe 'get_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_rsa_public
  # Obtain the public key from a specific RSA private key
  # Obtain the public key from a specific RSA private key Options:   name -    Name of key to be created   token -    Access token
  # @param name Name of key to be created
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @return [ReplyObj]
  describe 'get_rsa_public test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_secret_value
  # Get static secret value
  # Get static secret value Options:   name -    Secret name   token -    Access token
  # @param name Secret name
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @return [ReplyObj]
  describe 'get_secret_value test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_ssh_certificate
  # Generates SSH certificate
  # Generates SSH certificate Options:   cert-username -    The username to sign in the SSH certificate   cert-issuer-name -    The name of the SSH certificate issuer   public-key-file-path -    SSH public key   outfile -    Output file path with the certificate. If not provided, the file with the certificate will be created in the same location of the provided public key with the -cert extension   token -    Access token
  # @param cert_username The username to sign in the SSH certificate
  # @param cert_issuer_name The name of the SSH certificate issuer
  # @param public_key_file_path SSH public key
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :outfile Output file path with the certificate. If not provided, the file with the certificate will be created in the same location of the provided public key with the -cert extension
  # @return [ReplyObj]
  describe 'get_ssh_certificate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for help
  # help text
  # help text
  # @param [Hash] opts the optional parameters
  # @return [ReplyObj]
  describe 'help test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_auth_methods
  # Returns a list of all the Auth Methods in the account
  # Returns a list of all the Auth Methods in the account Options:   pagination-token -    Next page reference   token -    Access token
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pagination_token Next page reference
  # @return [ReplyObj]
  describe 'list_auth_methods test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_items
  # Returns a list of all accessible items
  # Returns a list of all accessible items Options:   type -    The item types list of the requested items. In case it is empty, all types of items will be returned. options- [key, static-secret, dynamic-secret]   ItemsTypes -    ItemsTypes   filter -    Filter by item name or part of it   path -    Path to folder   pagination-token -    Next page reference   token -    Access token
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :type The item types list of the requested items. In case it is empty, all types of items will be returned. options- [key, static-secret, dynamic-secret]
  # @option opts [String] :items_types ItemsTypes
  # @option opts [String] :filter Filter by item name or part of it
  # @option opts [String] :path Path to folder
  # @option opts [String] :pagination_token Next page reference
  # @return [ReplyObj]
  describe 'list_items test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for list_roles
  # Returns a list of all roles in the account
  # Returns a list of all roles in the account Options:   pagination-token -    Next page reference   token -    Access token
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :pagination_token Next page reference
  # @return [ReplyObj]
  describe 'list_roles test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_role_rule
  # Set a rule to a role
  # Set a rule to a role Options:   role-name -    The role name to be updated   path -    The path the rule refers to   capability -    List of the approved/denied capabilities in the path options- [read, create, update, delete, list, deny]   token -    Access token
  # @param role_name The role name to be updated
  # @param path The path the rule refers to
  # @param capability List of the approved/denied capabilities in the path options- [read, create, update, delete, list, deny]
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @return [ReplyObj]
  describe 'set_role_rule test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for sign_pkcs1
  # Calculates the signature of hashed using RSASSA-PKCS1-V1_5-SIGN from RSA PKCS#1 v1.5
  # Calculates the signature of hashed using RSASSA-PKCS1-V1_5-SIGN from RSA PKCS#1 v1.5 Options:   key-name -    The name of the RSA key to use in the signing process   message -    The message to be signed   token -    Access token
  # @param key_name The name of the RSA key to use in the signing process
  # @param message The message to be signed
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @return [ReplyObj]
  describe 'sign_pkcs1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for unconfigure
  # Remove Configuration of client profile.
  # Remove Configuration of client profile. Options:   token -    Access token
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @return [ReplyObj]
  describe 'unconfigure test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update
  # Update a new AKEYLESS CLI version
  # Update a new AKEYLESS CLI version Options:   token -    Access token
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @return [ReplyObj]
  describe 'update test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_item
  # Update item name and metadata
  # Update item name and metadata Options:   name -    Current item name   new-name -    New item name   new-metadata -    New item metadata   token -    Access token
  # @param name Current item name
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :new_name New item name
  # @option opts [String] :new_metadata New item metadata
  # @return [ReplyObj]
  describe 'update_item test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_role
  # Update role details
  # Update role details Options:   name -    Role name   new-name -    New Role name   new-comment -    New comment about the role   token -    Access token
  # @param name Role name
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :new_name New Role name
  # @option opts [String] :new_comment New comment about the role
  # @return [ReplyObj]
  describe 'update_role test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_secret_val
  # Update static secret value
  # Update static secret value Options:   name -    Secret name   value -    The new secret value   key -    The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)   multiline -    The provided value is a multiline value (separated by &#39;\\n&#39;)   token -    Access token
  # @param name Secret name
  # @param value The new secret value
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :key The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
  # @option opts [BOOLEAN] :multiline The provided value is a multiline value (separated by &#39;\\n&#39;)
  # @return [ReplyObj]
  describe 'update_secret_val test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_pkcs12
  # Upload a PKCS#12 key and certificates
  # Upload a PKCS#12 key and certificates Options:   name -    Name of key to be created   in -    PKCS#12 input file (private key and certificate only)   passphrase -    Passphrase to unlock the pkcs#12 bundle   metadata -    A metadata about the key   split-level -    The number of fragments that the item will be split into   customer-frg-id -    The customer fragment ID that will be used to split the key (if empty, the key will be created independently of a customer fragment)   cert -    Path to a file that contain the certificate in a PEM format. If this parameter is not empty, the certificate will be taken from here and not from the PKCS#12 input file   token -    Access token
  # @param name Name of key to be created
  # @param _in PKCS#12 input file (private key and certificate only)
  # @param passphrase Passphrase to unlock the pkcs#12 bundle
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :metadata A metadata about the key
  # @option opts [String] :split_level The number of fragments that the item will be split into
  # @option opts [String] :customer_frg_id The customer fragment ID that will be used to split the key (if empty, the key will be created independently of a customer fragment)
  # @option opts [String] :cert Path to a file that contain the certificate in a PEM format. If this parameter is not empty, the certificate will be taken from here and not from the PKCS#12 input file
  # @return [ReplyObj]
  describe 'upload_pkcs12 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for upload_rsa
  # Upload RSA key
  # Upload RSA key Options:   name -    Name of key to be created   alg -    Key type. options- [RSA1024, RSA2048]   rsa-key-file-path -    RSA private key file path   cert -    Path to a file that contain the certificate in a PEM format.   metadata -    A metadata about the key   split-level -    The number of fragments that the item will be split into   customer-frg-id -    The customer fragment ID that will be used to split the key (if empty, the key will be created independently of a customer fragment)   token -    Access token
  # @param name Name of key to be created
  # @param alg Key type. options- [RSA1024, RSA2048]
  # @param rsa_key_file_path RSA private key file path
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @option opts [String] :cert Path to a file that contain the certificate in a PEM format.
  # @option opts [String] :metadata A metadata about the key
  # @option opts [String] :split_level The number of fragments that the item will be split into
  # @option opts [String] :customer_frg_id The customer fragment ID that will be used to split the key (if empty, the key will be created independently of a customer fragment)
  # @return [ReplyObj]
  describe 'upload_rsa test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for verify_pkcs1
  # Verifies an RSA PKCS#1 v1.5 signature
  # Verifies an RSA PKCS#1 v1.5 signature Options:   key-name -    The name of the RSA key to use in the verification process   message -    The message to be verified   signature -    The message&#39;s signature   token -    Access token
  # @param key_name The name of the RSA key to use in the verification process
  # @param message The message to be verified
  # @param signature The message&#39;s signature
  # @param token Access token
  # @param [Hash] opts the optional parameters
  # @return [ReplyObj]
  describe 'verify_pkcs1 test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
